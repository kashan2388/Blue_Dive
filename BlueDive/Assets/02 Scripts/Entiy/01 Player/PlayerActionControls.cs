//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/02 Scripts/Entiy/01 Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionControls(UnityEngine.Rigidbody2D rigidbody2D, PlayerStat playerStat)
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""9ab8b4dd-577e-451f-9e9a-b6c8a15ae3f1"",
            ""actions"": [
                {
                    ""name"": ""HookGrab"",
                    ""type"": ""Button"",
                    ""id"": ""e81f07fc-eedd-4e7d-a4be-9a70928be582"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HookReterieve"",
                    ""type"": ""Button"",
                    ""id"": ""53ec917c-afba-4490-9c1a-6b7ec8e3f036"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5201e639-1ad7-4825-a194-9ab64ae570a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SideMove"",
                    ""type"": ""Value"",
                    ""id"": ""2b9ad047-779e-44c3-b20b-2e64edc50a31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b4abaab-77cf-4d00-9cae-40882adc7ba7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""HookGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79a12d78-c010-4305-bc1c-fe02258b27fc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""HookReterieve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b9781d0-377a-45aa-88a6-eece74bfa66c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a21d7e72-9ab8-4ce5-a3ba-9659a9963b10"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f4e57cf2-857c-4bbc-be4e-69983f308b87"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca97fded-cc2f-4eed-9a2a-9f07917e70f1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_HookGrab = m_PlayerControls.FindAction("HookGrab", throwIfNotFound: true);
        m_PlayerControls_HookReterieve = m_PlayerControls.FindAction("HookReterieve", throwIfNotFound: true);
        m_PlayerControls_Interact = m_PlayerControls.FindAction("Interact", throwIfNotFound: true);
        m_PlayerControls_SideMove = m_PlayerControls.FindAction("SideMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private List<IPlayerControlsActions> m_PlayerControlsActionsCallbackInterfaces = new List<IPlayerControlsActions>();
    private readonly InputAction m_PlayerControls_HookGrab;
    private readonly InputAction m_PlayerControls_HookReterieve;
    private readonly InputAction m_PlayerControls_Interact;
    private readonly InputAction m_PlayerControls_SideMove;
    public struct PlayerControlsActions
    {
        private @PlayerActionControls m_Wrapper;
        public PlayerControlsActions(@PlayerActionControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HookGrab => m_Wrapper.m_PlayerControls_HookGrab;
        public InputAction @HookReterieve => m_Wrapper.m_PlayerControls_HookReterieve;
        public InputAction @Interact => m_Wrapper.m_PlayerControls_Interact;
        public InputAction @SideMove => m_Wrapper.m_PlayerControls_SideMove;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Add(instance);
            @HookGrab.started += instance.OnHookGrab;
            @HookGrab.performed += instance.OnHookGrab;
            @HookGrab.canceled += instance.OnHookGrab;
            @HookReterieve.started += instance.OnHookReterieve;
            @HookReterieve.performed += instance.OnHookReterieve;
            @HookReterieve.canceled += instance.OnHookReterieve;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SideMove.started += instance.OnSideMove;
            @SideMove.performed += instance.OnSideMove;
            @SideMove.canceled += instance.OnSideMove;
        }

        private void UnregisterCallbacks(IPlayerControlsActions instance)
        {
            @HookGrab.started -= instance.OnHookGrab;
            @HookGrab.performed -= instance.OnHookGrab;
            @HookGrab.canceled -= instance.OnHookGrab;
            @HookReterieve.started -= instance.OnHookReterieve;
            @HookReterieve.performed -= instance.OnHookReterieve;
            @HookReterieve.canceled -= instance.OnHookReterieve;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SideMove.started -= instance.OnSideMove;
            @SideMove.performed -= instance.OnSideMove;
            @SideMove.canceled -= instance.OnSideMove;
        }

        public void RemoveCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    public interface IPlayerControlsActions
    {
        void OnHookGrab(InputAction.CallbackContext context);
        void OnHookReterieve(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSideMove(InputAction.CallbackContext context);
    }
}
